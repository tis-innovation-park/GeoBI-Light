<?php

namespace R3gis\AppBundle\Tests\Controller;

use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;

class MapControllerTest extends WebTestCase {

    public function setUp() {
        static::$kernel = static::createKernel();
        static::$kernel->boot();
        $this->container = static::$kernel->getContainer();
        $this->doctrine = static::$kernel->getContainer()->get('doctrine');
        $this->db = $this->doctrine->getConnection();
    }

    private function getCkanRandomData() {
        $sql = "SELECT it_ckan_package, it_ckan_id,it_id
                FROM geobi.import_tables 
                WHERE it_ckan_valid IS TRUE AND it_is_shape IS TRUE
                ORDER BY random()
                LIMIT 1";
        return $this->db->query($sql)->fetch(\PDO::FETCH_ASSOC);
    }

    // Check and return standard response (php array)
    private function getJsonResponse($response) {
        $body = $response->getContent();
        $statusCode = $response->getStatusCode();
        if ($statusCode != 200) {
            echo "\nRESPONSE ERROR [{$statusCode}]:\n\n{$body}\n\n";
            die();
        }
        $this->assertEquals($statusCode, 200);
        $json = json_decode($body, true);
        $this->assertTrue(is_array($json));
        if (empty($json['success']) || $json['success'] !== true) {
            echo "\nRESPONSE ERROR [success is false]:\n\n{$body}\n\n";
            die();
        }
        $this->assertTrue($json['success']);
        $this->assertTrue(is_array($json['result']));
        return $json;
    }

    public function testAddEmptyMap() {
        $client = static::createClient();

        $client->request('POST', '/api/1/map');
        $json = $this->getJsonResponse($client->getResponse());
        $this->assertTrue(!empty($json['result']['hash']));
        $hash = $json['result']['hash'];
        // echo "[ADD MAP: Hash={$hash}]\n";
        return array('main' => $hash, 'child' => $hash);
    }

    /**
     * @depends testAddEmptyMap
     */
    public function testInfoAfterAdd($hashList) {
        $client = static::createClient();
        // $hash = '9961fafc1fc1e5ca7f841ebea0ee4003';
        $client->request('GET', "/api/1/map/{$hashList['main']}/map.json");
        $json = $this->getJsonResponse($client->getResponse());
        // print_r(json_encode($json)); die();
        $this->assertTrue(!empty($json['result']['hash']));
        $this->assertEquals($json['result']['hash'], $hashList['main']);
    }

    /**
     * @depends testAddEmptyMap
     */
    public function testModMap($hashList) {
        $client = static::createClient();

        $jsonData = '{
    "map": {
        "name": "UnitTestMap",
        "description": "Map generated by automatic unit test",
        "private": false,
        "temporary": false,
        "displayProjection": "EPSG:3857",
        "extent": [
            737779,
            4231225,
            2061823,
            5957355
        ],
        "userExtent": null,
        "layers": [
            {
                "name": null,
                "order": 0,
                "type": "background",
                "active": true,
                "options": {
                    "source": "osm"
                }
            }
        ],
        "clickCount": 1,
        "language": "en",
        "user": {
            "name": "User (Test)"
        }
    }
}';

        $client->request('PUT', "/api/1/map/{$hashList['main']}", array(), array(), array('CONTENT_TYPE' => 'application/json'), $jsonData); //'{"name":"Fabien"}');
        $json = $this->getJsonResponse($client->getResponse());
        $this->assertEquals($json['result']['hash'], $hashList['main']);
        $this->assertEquals($json['result']['map']['name'], 'UnitTestMap');
        //echo "[MOD MAP: Hash={$hash}]\n";
    }

    /**
     * @depends testAddEmptyMap
     */
    public function testListNoFilter() {
        $client = static::createClient();

        $client->request('GET', '/api/1/map/maps.json');
        $json = $this->getJsonResponse($client->getResponse());
        $this->assertTrue($json['total'] > 0);
    }

    /**
     * @depends testAddEmptyMap
     */
    public function testListTextSearch() {
        $client = static::createClient();

        $params = array('q' => 'test');
        $client->request('GET', '/api/1/map/maps.json', $params);
        $json = $this->getJsonResponse($client->getResponse());
        $this->assertTrue(count($json['result']) > 0);
    }

    /**
     * @depends testAddEmptyMap
     */
    public function testAddLayerFromCkan($hashList) {
        $client = static::createClient();

        $ckan = $this->getCkanRandomData();

        $jsonData = "{\"data_column\": null,
                      \"spatial_column\": null,
                      \"duplicate\": true,
                      \"hash\": \"{$hashList['main']}\"}";
        $client->request('POST', "/api/1/import/ckan/{$ckan['it_ckan_package']}/{$ckan['it_ckan_id']}/{$ckan['it_id']}", array(), array(), array('CONTENT_TYPE' => 'application/json'), $jsonData); //'{"name":"Fabien"}');
        $json = $this->getJsonResponse($client->getResponse());
        $this->assertNotEquals($json['result']['hash'], $hashList['main']);
        $this->assertEquals($json['result']['map']['name'], 'UnitTestMap');
        $hashList['child'] = $json['result']['hash'];
        return $hashList;
    }

    /**
     * @depends testAddLayerFromCkan
     */
    public function testModMapAfterImport($hashList) {
        $client = static::createClient();

        $jsonData = '{
    "map": {
        "name": "UnitTestMap-2",
        "description": "Map generated by automatic unit test",
        "private": false,
        "temporary": true,
        "displayProjection": "EPSG:3857",
        "extent": [
            737779,
            4231225,
            2061823,
            5957355
        ],
        "userExtent": null,
        "layers": [
            {
                "name": null,
                "order": 0,
                "type": "background",
                "active": true,
                "options": {
                    "source": "osm"
                }
            },
            {
                "name": "Statistic layer 1",
                "order": 1,
                "type": "statistic",
                "active": true,
                "options": {
                    "layerType": "fill",
                    "divisionType": null,
                    "divisions": 4,
                    "precision": null,
                    "unit": null,
                    "nodataColor": "#F18F18",
                    "temporary": false,
                    "opacity": 80,
                    "outlineColor": "#98989C",
                    "minSize": 4,
                    "maxSize": 20,
                    "sizeType": "linear",
                    "symbol": null,
                    "class": [
                        {
                            "order": 1,
                            "name": null,
                            "number": 5,
                            "text": null,
                            "color": "#FF0000"
                        }, {
                            "order": 2,
                            "name": null,
                            "number": 30,
                            "text": null,
                            "color": "#0000FF"
                        }
                    ],
                    "extent": [
                        1156249,
                        5815782,
                        1389052,
                        5956934
                    ]
                }
            }
        ],
        "clickCount": 1,
        "language": "en",
        "user": {
            "name": "User (Test)"
        }
    }
}';

        $client->request('PUT', "/api/1/map/{$hashList['child']}", array(), array(), array('CONTENT_TYPE' => 'application/json'), $jsonData);
        $json = $this->getJsonResponse($client->getResponse());
        $this->assertEquals($json['result']['hash'], $hashList['child']);
        $this->assertEquals($json['result']['map']['name'], 'UnitTestMap-2');
    }
    
    /**
     * @depends testAddLayerFromCkan
     */
    public function testModMapFinally($hashList) {
        $client = static::createClient();

        $jsonData = '{
            "copyFromHash": "[TEMPORARY_HASH]",
    "map": {
        "name": "UnitTestMap-3",
        "description": "Map generated by automatic unit test",
        "private": false,
        "temporary": true,
        "displayProjection": "EPSG:3857",
        "extent": [
            737779,
            4231225,
            2061823,
            5957355
        ],
        "userExtent": null,
        "layers": [
            {
                "name": null,
                "order": 0,
                "type": "background",
                "active": true,
                "options": {
                    "source": "osm"
                }
            },
            {
                "name": "Statistic layer 2",
                "order": 1,
                "type": "statistic",
                "active": true,
                "options": {
                    "layerType": "fill",
                    "divisionType": null,
                    "divisions": 4,
                    "precision": null,
                    "unit": null,
                    "nodataColor": "#F18F18",
                    "temporary": false,
                    "opacity": 80,
                    "outlineColor": "#98989C",
                    "minSize": 4,
                    "maxSize": 20,
                    "sizeType": "linear",
                    "symbol": null,
                    "class": [
                        {
                            "order": 1,
                            "name": null,
                            "number": 5,
                            "text": null,
                            "color": "#FF0000"
                        }, {
                            "order": 2,
                            "name": null,
                            "number": 30,
                            "text": null,
                            "color": "#0000FF"
                        }
                    ],
                    "extent": [
                        1156249,
                        5815782,
                        1389052,
                        5956934
                    ]
                }
            }
        ],
        "clickCount": 1,
        "language": "en",
        "user": {
            "name": "User (Test)"
        }
    }
}';

        $jsonData = str_replace('[TEMPORARY_HASH]', $hashList['child'], $jsonData);
        $client->request('PUT', "/api/1/map/{$hashList['main']}", array(), array(), array('CONTENT_TYPE' => 'application/json'), $jsonData);
        $json = $this->getJsonResponse($client->getResponse());
        $this->assertEquals($json['result']['hash'], $hashList['main']);
        $this->assertEquals($json['result']['map']['name'], 'UnitTestMap-3');
    }

    /**
     * @depends testAddEmptyMap
     */
    public function testCopyMap($hashList) {
        $client = static::createClient();
        
        $jsonData = "{\"language\": \"it\"}";
        $client->request('POST', "/api/1/map/{$hashList['main']}", array(), array(), array('CONTENT_TYPE' => 'application/json'), $jsonData);
        $json = $this->getJsonResponse($client->getResponse());
        // print_r(json_encode($json)); die();
        $this->assertTrue(!empty($json['result']['hash']));
        $this->assertNotEquals($json['result']['hash'], $hashList['main']);
        $this->assertFalse($json['result']['map']['temporary']);
        
        // Remove copied map
        $client->request('DELETE', "/api/1/map/{$json['result']['hash']}");
        $json = $this->getJsonResponse($client->getResponse());
        $this->assertTrue(!empty($json['result']['hash']));
        $this->assertNotEquals($json['result']['hash'], $hashList['main']);
    }
    
    /**
     * @depends testAddEmptyMap
     */
    public function testDeleteMap($hashList) {
        $client = static::createClient();
        
        //$jsonData = "{\"language\": \"it\"}";
        $client->request('DELETE', "/api/1/map/{$hashList['main']}");
        $json = $this->getJsonResponse($client->getResponse());
        $this->assertTrue(!empty($json['result']['hash']));
        $this->assertEquals($json['result']['hash'], $hashList['main']);
    }
    
    
}
